Changes from Asphyre 3.1 to Asphyre 4.0:

General:
 + Multiple device support (e.g. Devices[DeviceNum].Canvas.Draw(...)): draw on multiple 
   monitors in full-screen mode.
 + Rendering on multiple controls (panels, windows, etc.) is supported now.  

Media:
 + The descriptions of all types of images used in the project are held in XML file, where 
   there is a path to destination image file (may be inside an archive).
 * Images, Surfaces (Render Targets) and Dynamic (Textures) are all specified in XML.  
 + Native support for SQX archives has been added.
 + Support for 7z archives has been added. 
 * Searching for image by name/uid uses binary search now - considerably faster than in
   previous versions.
 
2D:
 + Drawing/blending effects can now be extended with user-defined effects by using 
   callback mechanism and are no longer wired in TAsphyreCanvas.

 + Added support for non-indexed/indexed drawing modes and for drawing strips and fans,
   depending on the preference of the user.

 * Points and lines no longer use indexed buffers.

 + Added suport for drawing filled triangles with unique vertex colors.

 + Added conditional compiler directive "LowCacheOptimize", which can be used to maximize
   the performance when not grouping primitives together (e.g. images, pixels, lines, 
   filled shapes, etc.) 
   It provides alternative code, which avoids using index buffers and attempts to reduce
   the bandwidth usage by using strips and fans whenever possible.

 + Added a more precise gradient filler function FillQuadEx, which uses an additional
   vertex and two more triangles improve the accuracy of the rendered quad.

 + FillArc drawing support has been added.
 * FillEllipse uses FillArc and now accepts gradient colors.
 * FillCircle no longer uses PutPixel; instead, it uses high-performance FillArc.
 * For image drawing, the image is specified before rendering function, separately.
 * Image texture coordinates are specified now as pairs of (u, v) as absolute values
   or relative values, if Pattern is used.
 + Images are referenced in XML files now and loaded upon resolution. This way,
   unneeded graphics is not loaded. You can even load the specific image at the
   moment you need it instead of loading everything at startup.
 + FillRibbon method added for drawing ribbons (an arc defined with inner and outer 
   ellipses). It supports two filling modes - square linear interpolation (classical 
   Asphyre filling) and radial filling using TAsphyrePalette.
 + FrameRibbon method added for drawing frames of similar shape as FillRibbon.
 * Can draw on multiple panels simultaneously by specifying window handle in Flip
   method, thus removing the necesity of using multiple devices and loading artwork
   for each device. However, for multi-monitor support, using several devices is
   still a must.
 * Updated support for Render Targets: their implementation is called TAsphyreSurface.
   The render target information is loaded from XML description file as well.
 + Added PreloadEvent to TAsphyreDevices so that the required images can be preloaded
   instead of being loaded on-the-fly (this prevents some delays during the first
   appearance of images on the screen).
   
   
-----------------------------------------------------------------------------------------------   

Additions and changes in snapshot dated 23-Jan-2007:

General:
 + FontTool v3.0 added with ability to render fonts with alpha-channel and a variety
   of effects, such as outline border and 3D shadow. Additional parameters can be
   specified now such as text opacity and brightness, shadow smoothness and an
   additional sharp filter to improve blurry antialiased fonts.
 * Fonts are stored in two files now - font image (e.g. MyFont.png) and font
   description (e.g. MyFont.XML). Both must be described in their respective XML
   files.   
    
Media:
 +  Added XML description support for Fonts, where both System and Bitmap fonts can
    be described. Bitmap fonts rely additionally on XML descriptions generated by
	FontTool, where character information is specified. System fonts are defined
	by a small number of parameters.
 +  Bitmap fonts rely on font image descriptions, which must be defined separately.
 
2D:
 + Added support for D3DX lines, which can be antialiased and have custom width.
   Several variations of LineEx() methods render these lines.
 * Previous Line() methods are renamed to LineHw() to represent native lines.
 * FrameRibbon() renamed to FrameRibbonHw(), since it uses native lines.
 + Added FrameRibbonEx() method which renders ribbon frame using D3DX lines.
 * Further improvements to FillQuadEx() using 6 triangles and more precise filling
   approach.
 + Added options LineWidth and LineAntialias to TAsphyreCanvas that control how lines
   appear when using LineEx() method.
 + Unified font support added for both System and Bitmap fonts. Each font can be
   resolved by its name - whether it is system or bitmap font, it is completely
   transparent for the user.
 + Unicode text output is now fully supported using TextOutW(). This only works for
   system fonts only.
 + Dynamic textures are supported now; they are called "drafts".
 
Documentation:
 + Added a tutorial explaining how to create and use system fonts in Asphyre 4.
 
-----------------------------------------------------------------------------------------------   

Additions and changes in snapshot dated XX-XX-XXXXX:
 
2D:
 + Added UseImage() method which accepts mapping coordinates in terms of
   pixels rather logical units. 
 + Added UseImageTri() for specifying triangle mapping coordinates instead
   of quads.
 + Added TexTri() method for rendering textured triangles.  
 + Added Ellipse() and Circle() routines that draw ellipses and circles
   using LineEx() approach.
 + Added additional comments inside AsphyreCanvas.pas with detailed explanations
   for each rendering primitive.
   
-----------------------------------------------------------------------------------------------   

Additions and changes in snapshot dated 29-Jan-2007:

General:
 + TAsphyreKeyboard added wrapping DirectInput keyboard device.
 + TAsphyreMouse added wrapping DirectInput mouse device.
 + TAsphyreJoysticks added wrapping DirectInput game controller devices.
 + TAsphyreInput container added which holds keyboard, mouse and joystick wrappers.
 + Added basic 3D support: multiple lights, cameras and static X meshes that use
   one or several textures at once (loaded automatically). 
 